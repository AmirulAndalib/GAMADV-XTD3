name: Build and test GAM

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash
    working-directory: src

env:
  BUILD_PYTHON_VERSION: "3.9.5"
  MIN_PYTHON_VERSION: "3.9.5"
  BUILD_OPENSSL_VERSION: "1.1.1k"
  MIN_OPENSSL_VERSION: "1.1.1k"
  PATCHELF_VERSION: "0.12"
  # PYINSTALLER_VERSION can be full commit hash or version like v4.20
  PYINSTALLER_VERSION: "ae28d2ce57e7f12faf01e80d26e064dbfa903e40"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
#          - os: macos-10.15
#            jid: 4
#            goal: "build"
#            gamos: "macos"
#            platform: "x86_64"
#            python: 3.9.5 
          - os: windows-2019
            jid: 5
            goal: "build"
            gamos: "windows"
            pyarch: "x64" 
            platform: "x86_64"
            python: 3.9.5 
          - os: windows-2019
            jid: 6
            goal: "build"
            gamos: "windows"
            platform: "x86"
            pyarch: "x86"
            python: 3.9.5 

    steps:

      - uses: actions/checkout@master
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache multiple paths
        uses: actions/cache@v2
        if: matrix.goal != 'test'
        with:
          path: |
            ~/python
            ~/ssl
          key: ${{ matrix.os }}-${{ matrix.jid }}-20210504

      - name: Set env variables
        env:
          GAMOS: ${{ matrix.gamos }}
          GOAL: ${{ matrix.goal }}
          JID: ${{ matrix.jid }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          echo "GAMOS=${GAMOS}" >> $GITHUB_ENV
          echo "GOAL=${GOAL}" >> $GITHUB_ENV
          echo "JID=${JID}" >> $GITHUB_ENV
          echo "PLATFORM=${PLATFORM}" >> $GITHUB_ENV
          uname -a

      - name: Use pre-compiled Python for testing and Windows
        if: matrix.python != ''
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.pyarch }}

      - name: Build and install Python, OpenSSL and PyInstaller
        if: matrix.goal != 'test' && steps.cache-primes.outputs.cache-hit != 'true'
        run: |
             set +e
             export python=$(which python3)
             export pip=$(which pip3)
             export gampath="$(readlink -e .)"
             echo -e "python: $python\npip: $pip\ngampath: $gampath"
             echo "python=${python}" >> $GITHUB_ENV
             echo "pip=${pip}" >> $GITHUB_ENV
             echo "gampath=${gampath}" >> $GITHUB_ENV
             #echo "RUNNING: apt update..."
             #sudo apt-get -qq --yes update > /dev/null
             source ../.github/actions/${GAMOS}-before-install.sh
             echo "PATH=$PATH" >> $GITHUB_ENV # keep gnutools for MacOS
             echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV
             echo -e "Python: $python\nPip: $pip\nLD_LIB...: $LD_LIBRARY_PATH"
             $pip install pyinstaller

      - name: Install pip requirements
        if: matrix.os != 'self-hosted'
        run: |
             set +e
             $pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 $pip install -U --force-reinstall
             $pip install --upgrade -r requirements.txt

      - name: Build GAM with PyInstaller
        if: matrix.goal != 'test'
        env: # Or as an environment variable
          PASSCODE: ${{ secrets.PASSCODE }}
        run: |
             set +e
             source ../.github/actions/decrypt.sh ../.github/actions/creds.tar.gpg creds.tar
             source ../.github/actions/${GAMOS}-install.sh
             ls -alRF $gampath
             echo "gam=$gam" >> $GITHUB_ENV
             echo "GAMVERSION=$GAMVERSION" >> $GITHUB_ENV
             echo -e "GAM: ${gam}\nGAMPATH: ${gampath}\nGAMVERSION: ${GAMVERSION}"

      - name: Upload to Google Drive, build only.
        if: github.event_name == 'push' && matrix.goal != 'test'
        run: |
             set +e
             ls -l gamadv-xtd3-$GAMVERSION-*
             for gamfile in gamadv-xtd3-$GAMVERSION-*; do
               echo "Deleting old file ${gamfile} from Google Drive..."
               $gam user ross.scroggs@rdschool.org purge drivefile drivefilename $gamfile
               echo "Uploading file ${gamfile} to Google Drive..."
               fileid=$($gam user ross.scroggs@rdschool.org add drivefile localfile $gamfile drivefilename $gamfile parentid root returnidonly)
               echo "file uploaded as ${fileid}, setting ACL..."
               $gam user ross.scroggs@rdschool.org add drivefileacl $fileid anyone role reader withlink
             done
