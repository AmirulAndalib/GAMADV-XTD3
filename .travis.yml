if: tag IS blank
os: linux
language: python
dist: focal
# Force rebuild

env:
  global:
    - BUILD_PYTHON_VERSION=3.11.5
    - MIN_PYTHON_VERSION=3.11.5
    - LINUX_BUILD_OPENSSL_VERSION=3.1.1
    - LINUX_MIN_OPENSSL_VERSION=3.1.1
    - MACOS_BUILD_PYTHON_VERSION=3.10.8
    - MACOS_MIN_PYTHON_VERSION=3.10.8
    - MACOS_BUILD_OPENSSL_VERSION=1.1.1u
    - MACOS_MIN_OPENSSL_VERSION=1.1.1n
    - MIN_OPENSSL_VERSION=$LINUX_MIN_OPENSSL_VERSION
    - PATCHELF_VERSION=0.12
# PYINSTALLER_VERSION can be full commit hash or version like v4.10
    - PYINSTALLER_VERSION=v5.13.2

cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/python
    - $HOME/ssl

jobs:
  fast_finish: true
  include:
#    - os: linux
#      name: "Linux 64-bit Jammy"
#      dist: jammy
#      language: shell
#      env:
#        - DIST_UPGRADE=true
    - os: linux
      name: "Linux 64-bit Focal"
      dist: focal
      language: shell
      env:
        - DIST_UPGRADE=true
    - os: linux
      name: "Linux 64-bit Bionic"
      dist: bionic
      language: shell
      env:
        - DIST_UPGRADE=true
    - os: linux
      name: "Linux 64-bit Xenial"
      dist: xenial
      language: shell
      env:
        - DIST_UPGRADE=false
    - os: linux
      name: "Linux 64-bit Trusty"
      dist: trusty
      language: shell
      env:
        - DIST_UPGRADE=false
#    - os: linux
#      name: "Linux ARM64 Jammy"
#      dist: jammy
#      arch: arm64
#      language: shell
#      env:
#        - DIST_UPGRADE=false
#      filter_secrets: false
    - os: linux
      name: "Linux ARM64 Focal"
      dist: focal
      arch: arm64
      language: shell
      env:
        - DIST_UPGRADE=false
      filter_secrets: false
    - os: linux
      name: "Linux ARM64 Bionic"
      dist: bionic
      arch: arm64
      language: shell
      env:
        - DIST_UPGRADE=false
      filter_secrets: false
    - os: linux
      name: "Linux ARM64 Xenial"
      dist: xenial
      arch: arm64
      language: shell
      env:
        - DIST_UPGRADE=false
      filter_secrets: false
    - os: osx
      name: "MacOS"
      language: generic
      osx_image: xcode12.4
      env:
        - BUILD_PYTHON_VERSION=$MACOS_BUILD_PYTHON_VERSION
        - MIN_PYTHON_VERSION=$MACOS_MIN_PYTHON_VERSION
        - MIN_OPENSSL_VERSION=$MACOS_MIN_OPENSSL_VERSION

before_install:
- if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    export GAMOS="macos";
  else
    export GAMOS="${TRAVIS_OS_NAME}";
  fi
- export SCRIPT_OS_NAME="${GAMOS}";
  if [ "${TRAVIS_CPU_ARCH}" == "amd64" ]; then
    export PLATFORM="x86_64";
  else
    export PLATFORM="${TRAVIS_CPU_ARCH}";
  fi
- source src/travis/${SCRIPT_OS_NAME}-before-install.sh

install:
- source src/travis/${SCRIPT_OS_NAME}-install.sh

script:
- $gam version | grep travis # travis should be part of the path (not /tmp or such)
# Determine which Python version GAM is built with and ensure it's at least build version from above.
- vline=$($gam version | grep "Python "); python_line=($vline); this_python=${python_line[1]}; $python tools/a_atleast_b.py $this_python $MIN_PYTHON_VERSION
# Determine which OpenSSL version GAM is built with and ensure it's at least build version from above.
#- vline=$($gam config config tls_min_version TLSv1_3 version extended | grep "OpenSSL "); openssl_line=($vline); this_openssl=${openssl_line[1]}; $python tools/a_atleast_b.py $this_openssl $MIN_OPENSSL_VERSION
# Builds should default TLS 1.2 or 1.3 to Google
#- $gam version extended | grep TLSv1\.[23]
# expect fail since server doesn't support our TLS version
- $gam config tls_min_version TLSv1_2 version extended location tls-v1-0.badssl.com:1010; [[ $? == 3 ]]

before_deploy:
- export TRAVIS_TAG="preview"
- unset LD_LIBRARY_PATH

deploy:
  provider: releases
  token: $GITHUB_TOKEN
  file_glob: true
  overwrite: true
  file: gamadv-xtd3-$GAMVERSION-*
  skip_cleanup: true
  draft: true
  on:
    repo: taers232c/GAMADV-XTD3
