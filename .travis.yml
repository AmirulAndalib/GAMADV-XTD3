if: tag IS blank
os: linux
language: python
dist: focal

env:
  global:
    - BUILD_PYTHON_VERSION=3.9.5
    - MIN_PYTHON_VERSION=3.9.5
    - BUILD_OPENSSL_VERSION=1.1.1k
    - MIN_OPENSSL_VERSION=1.1.1k
    - PATCHELF_VERSION=0.12
    - PYINSTALLER_COMMIT=ae28d2ce57e7f12faf01e80d26e064dbfa903e40

cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/python
    - $HOME/ssl

jobs:
  fast_finish: true
  include:
    - os: linux
      name: "Linux 64-bit Focal"
      dist: focal
      language: shell
      env:
        - DIST_UPGRADE=true
    - os: linux
      name: "Linux 64-bit Bionic"
      dist: bionic
      language: shell
      env:
        - DIST_UPGRADE=true
    - os: linux
      name: "Linux 64-bit Xenial"
      dist: xenial
      language: shell
      env:
        - DIST_UPGRADE=false
    - os: linux
      name: "Linux 64-bit Trusty"
      dist: trusty
      language: shell
      env:
        - DIST_UPGRADE=true
    - os: linux
      name: "Linux 64-bit Precise"
      dist: precise
      language: shell
      env:
        - DIST_UPGRADE=false
        - PATCHELF_VERSION=0.9
    - os: linux
      name: "Linux ARM64 Focal"
      dist: focal
      arch: arm64
      language: shell
      env:
        - DIST_UPGRADE=false
      filter_secrets: false
    - os: linux
      name: "Linux ARM64 Bionic"
      dist: bionic
      arch: arm64
      language: shell
      env:
        - DIST_UPGRADE=false
      filter_secrets: false
    - os: linux
      name: "Linux ARM64 Xenial"
      dist: xenial
      arch: arm64
      language: shell
      env:
        - DIST_UPGRADE=true
      filter_secrets: false
    - os: osx
      name: "MacOS"
      language: generic
      osx_image: xcode12.4
    - os: windows
      name: "Windows 64-bit"
      language: shell
    - os: windows
      name: "Windows 32-bit"
      language: shell

before_install:
- if [ "${TRAVIS_OS_NAME}" == "osx" ]; then
    export GAMOS="macos";
  else
    export GAMOS="${TRAVIS_OS_NAME}";
  fi
- export SCRIPT_OS_NAME="${GAMOS}";
- if [ "${TRAVIS_JOB_NAME}" == "Windows 32-bit" ]; then
    export PLATFORM="x86";
  elif [ "${TRAVIS_CPU_ARCH}" == "amd64" ]; then
    export PLATFORM="x86_64";
  else
    export PLATFORM="${TRAVIS_CPU_ARCH}";
  fi
- source src/travis/${SCRIPT_OS_NAME}-before-install.sh

install:
- source src/travis/${SCRIPT_OS_NAME}-install.sh

script:
- $gam version extended
- $gam version | grep travis # travis should be part of the path (not /tmp or such)
# determine which Python version GAM is built with and ensure it's at least build version from above.
- if [[ "$TRAVIS_JOB_NAME" != *"Testing" ]];  then vline=$($gam version | grep "Python "); python_line=($vline); this_python=${python_line[1]}; $python tools/a_atleast_b.py $this_python $MIN_PYTHON_VERSION; fi
# determine which OpenSSL version GAM is built with and ensure it's at least build version from above.
- if [[ "$TRAVIS_JOB_NAME" != *"Testing" ]]; then vline=$($gam version extended | grep "OpenSSL "); openssl_line=($vline); this_openssl=${openssl_line[1]}; $python tools/a_atleast_b.py $this_openssl $MIN_OPENSSL_VERSION; fi
- if [[ "$TRAVIS_JOB_NAME" != *"Testing" ]]; then $gam version extended | grep TLSv1\.[23]; fi # Builds should default TLS 1.2 or 1.3 to Google
- if [[ "$TRAVIS_JOB_NAME" != *"Testing" ]]; then $gam config tls_min_version TLSv1_2 version extended location tls-v1-0.badssl.com:1010; [[ $? == 3 ]]; fi # expect fail since server doesn't support our TLS version

before_deploy:
- export TRAVIS_TAG="preview"
- unset LD_LIBRARY_PATH

deploy:
  provider: releases
  github-token: $GITHUB_TOKEN
  file_glob: true
  overwrite: true
  file: gamadv-xtd3-$GAMVERSION-*
  skip_cleanup: true
  draft: true
  on:
    repo: taers232c/GAMADV-XTD3
    condition: $TRAVIS_JOB_NAME != *"Testing"
